/*
 * File: app/controller/DreamsTabController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.DreamsTabController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            dreamDetails: 'dreamDetails',
            tortoiseDetails: 'tortoiseDetails',
            tortoiseListPanel: 'tortoiseListPanel',
            whatsYourDreamTextField: 'textfield[name=\'whatsYourDreamTextField\']',
            mainTabPanel: 'mainTabPanel',
            dreamListCardPanel: 'dreamListCardPanel',
            dreamDeleteButton: 'button[name=\'dreamDeleteButton\']',
            dreamListPanel: 'dreamListPanel',
            tortoiseDetailsBackToListButton: 'button[name=\'tortoiseDetailsBackToListButton\']',
            tortoiseDetailsBackToDreamButton: 'button[name=\'tortoiseDetailsBackToDreamButton\']',
            tortoiseDeleteButton: 'button[name=\'tortoiseDeleteButton\']',
            homeTabCardPanel: 'homeTabCardPanel',
            dreamList: 'dreamList',
            tortoiseList: 'tortoiseList'
        },

        control: {
            "button[name='homePageDreamButton']": {
                tap: 'onHomeTabNewDreamButtonTap'
            },
            "dreamList": {
                itemtap: 'onDreamListItemTap'
            },
            "button[name='dreamDetailsNextButton']": {
                tap: 'onDreamDetailsNextButtonTap'
            },
            "button[name='dreamDetailsBackButton']": {
                tap: 'onDreamDetailsBackButtonTap'
            },
            "button[name='tortoiseListStartDreamingButton']": {
                tap: 'onTortoiseListStartDreamingButtonTap'
            },
            "button[name='dreamDeleteButton']": {
                tap: 'onDreamDeleteButtonButtonTap'
            },
            "button[name='tortoiseListPanelBackButton']": {
                tap: 'onTortoiseListPanelBackButtonTap'
            },
            "tortoiseList": {
                itemtap: 'onTortoiseListItemTap'
            },
            "button[name='allTortletsPanelDreamButton']": {
                tap: 'onAllTortletsPanelDreamButtonTap'
            },
            "button[name='tortoiseListPanelAddButton']": {
                tap: 'onTortoiseListPanelAddButtonTap'
            },
            "button[name='tortoiseDetailsSaveButton']": {
                tap: 'onTortoiseDetailsSaveButtonTap'
            },
            "button[name='tortoiseDetailsBackButton']": {
                tap: 'onTortoiseDetailsBackButtonTap'
            },
            "button[name='tortoiseDetailsTortletsButton']": {
                tap: 'onTortoiseDetailsTortletsButtonTap'
            },
            "button[name='tortoiseDetailsBackToListButton']": {
                tap: 'onTortoiseDetailsBackToListButtonTap'
            },
            "button[name='tortoiseDetailsBackToDreamButton']": {
                tap: 'onTortoiseDetailsBackHorizontalButtonTap'
            },
            "button[name='tortoiseDeleteButton']": {
                tap: 'onTortoiseDeleteButtonTap'
            },
            "button#mybutton2": {
                tap: 'onTortoiseListStartDreamingButtonTap'
            }
        }
    },

    onHomeTabNewDreamButtonTap: function(button, e, eOpts) {
        console.log('inside onHomePageDreamButtonTap');
        var dreamForm = this.getDreamDetails();
        var text = this.getWhatsYourDreamTextField().getValue();
        //alert(text);
        var record = Ext.create('MyApp.model.Dream');
        record.set('title', text);
        dreamForm.newStatus='true';
        dreamForm.setRecord(record);
        var mainTabPanel = this.getMainTabPanel();
        mainTabPanel.setActiveItem(1);
        var deleteButton = this.getDreamDeleteButton(); //Ext.ComponentQuery.query("button[name='dreamDeleteButton']");
        deleteButton.hide();
        dreamForm.getScrollable().getScroller().scrollToTop();
        this.getDreamListCardPanel().animateActiveItem(dreamForm, { type: 'slide'});
        this.getWhatsYourDreamTextField().setValue('');

    },

    onDreamListItemTap: function(dataview, index, target, record, e, eOpts) {
        var dreamDetails = this.getDreamDetails();
        dreamDetails.newStatus = 'false';
        dreamDetails.setRecord(record);
        //alert(record.get('id'));
        MyApp.app.currentDreamId = record.get('id');
        this.getDreamDeleteButton().show();
        dreamDetails.getScrollable().getScroller().scrollToTop();
        this.getDreamListCardPanel().animateActiveItem(dreamDetails, { type: 'slide'} );

    },

    onDreamDetailsNextButtonTap: function(button, e, eOpts) {
        var tortoiseListPanel = this.getTortoiseListPanel();
        var tortoiseList = this.getTortoiseList();
        var dreamDetailsForm = this.getDreamDetails();
        var newStatus = dreamDetailsForm.newStatus;
        var currentUser = MyApp.app.currentUser;
        /* Accessing global variable which has been set 
        in Application launch() function */
        var userid = MyApp.app.currentUser.get('userid');; 
        var utility = MyApp.app.getController('UtilityController');
        /* Need this so that this controller is available in 
        callback methods. */
        var caller = MyApp.app.getController('DreamsTabController');
        var tempDreamId = MyApp.app.tempId;

        var newOrOldDream = dreamDetailsForm.getRecord();
        dreamDetailsForm.updateRecord(newOrOldDream);
        var errors = newOrOldDream.validate();

        if (!errors.isValid()) {
            Ext.Msg.alert('Enter all mandatory fields', '', Ext.emptyFn);
            newOrOldDream.reject();
            return;
        }
        var operation = {};
        operation.success = this.dreamSave;
        operation.failure = function() {Ext.Msg.alert('Server error, try later','',Ext.emptyFn);return;};

        if(newStatus === 'true'){ 
            newOrOldDream.set('userid', userid);
            newOrOldDream.setTuser(currentUser.getData());
            /* IF u dont do this, id will be posted to server as 
            ext-record-<number>. That will result into exception */
            newOrOldDream.set('id',MyApp.app.tempId);
            newOrOldDream.save(operation);

        }else{
            newOrOldDream.save(operation);
        }

    },

    onDreamDetailsBackButtonTap: function(button, e, eOpts) {
        var mainTabPanel = this.getMainTabPanel();
        var homeTabCardPanel = this.getHomeTabCardPanel();
        var dreamForm = this.getDreamDetails();
        var dreamListCardPanel = this.getDreamListCardPanel();
        var dreamListPanel = this.getDreamListPanel();

        if(dreamForm.newStatus === 'true') {

            mainTabPanel.setActiveItem(homeTabCardPanel);
        }else {

            dreamListCardPanel.animateActiveItem(dreamListPanel,{ type : 'slide', direction : 'right'});

        }
    },

    onTortoiseListStartDreamingButtonTap: function(button, e, eOpts) {
        this.getDreamListCardPanel().animateActiveItem(0, {type : 'slide', direction : 'right'});
    },

    onDreamDeleteButtonButtonTap: function(button, e, eOpts) {
        var dreamListPanel = this.getDreamListPanel();
        var dreamListCardPanel = this.getDreamListCardPanel();
        var dreamDetails = this.getDreamDetails();
        var dreamList = this.getDreamList();
        var dream = dreamDetails.getRecord();
        dreamDetails.updateRecord(dream);


        Ext.Msg.confirm('', "Dream and it's tortoises will be deleted !", function(buttonId,value,opt) {

            if(buttonId === 'yes') { 
                dream.getProxy().setAppendId(true);
                dream.erase({ 
                    scope : this,
                    success : function(record, operation) { 
                        dream.getProxy().setAppendId(false);
                        var dreamsStore = Ext.getStore('dreamsStore');
                        dreamsStore.load();// Have to load again otherwise
                        // store list does not get refreshed.                
                        dreamListCardPanel.animateActiveItem(dreamListPanel, { type : 'slide', direction : 'right'});
                    },
                    failure : function(record, operation) { alert('delete failed');}

                });

            }

        });


    },

    onTortoiseListPanelBackButtonTap: function(button, e, eOpts) {
        var dreamDetails = this.getDreamDetails();
        dreamDetails.newStatus = 'false';
        dreamDetails.getScrollable().getScroller().scrollToTop();
        this.getDreamListCardPanel().animateActiveItem(dreamDetails, { type : 'slide', direction : 'right'});
    },

    onTortoiseListItemTap: function(dataview, index, target, record, e, eOpts) {
        var tortoiseDetailsForm = this.getTortoiseDetails();
        tortoiseDetailsForm.setRecord(record);
        tortoiseDetailsForm.newStatus='false';
        var tortoiseDetailsBackToDreamButton = this.getTortoiseDetailsBackToDreamButton();
        tortoiseDetailsBackToDreamButton.show();
        var tortoiseDetailsBackToListButton = this.getTortoiseDetailsBackToListButton();
        tortoiseDetailsBackToListButton.hide();
        var tortoiseDeleteButton =
        this.getTortoiseDeleteButton();
        tortoiseDeleteButton.show();
        tortoiseDetailsForm.getScrollable().getScroller().scrollToTop();
        this.getDreamListCardPanel().animateActiveItem(tortoiseDetailsForm,{ type : 'slide'});
    },

    onAllTortletsPanelDreamButtonTap: function(button, e, eOpts) {
        this.getDreamListCardPanel()
        .animateActiveItem(0,{ type : 'slide', direction : 'right'});
    },

    onTortoiseListPanelAddButtonTap: function(button, e, eOpts) {
        var dreamListCardPanel = this.getDreamListCardPanel();
        var tortoiseDetails = this.getTortoiseDetails();
        var dreamDetailsForm = this.getDreamDetails();
        var dream = dreamDetailsForm.getRecord();
        //dreamDetailsForm.updateRecord(oldDream);
        var newTortoise = Ext.create('MyApp.model.Tortoise', { });
        newTortoise.set('dream', dream.get('id'));
        newTortoise.set('title', '');// Otherwise it uses title of old tortoise ! strange
        tortoiseDetails.setRecord(newTortoise);
        tortoiseDetails.newStatus='true';
        var tortoiseDeleteButton = 
        this.getTortoiseDeleteButton();
        tortoiseDeleteButton.hide();
        var tortoiseDetailsBackToDreamButton 
        = this.getTortoiseDetailsBackToDreamButton();
        tortoiseDetailsBackToDreamButton.hide();
        var tortoiseDetailsBackToListButton 
        = this.getTortoiseDetailsBackToListButton();
        tortoiseDetailsBackToListButton.show();
        tortoiseDetails.getScrollable().getScroller().scrollToTop();
        dreamListCardPanel.animateActiveItem(tortoiseDetails, { type : 'slide', direction : 'down'});
    },

    onTortoiseDetailsSaveButtonTap: function(button, e, eOpts) {
        var tortoiseListPanel = this.getTortoiseListPanel();

        var tortoiseDetailsForm = this.getTortoiseDetails();
        var newStatus = tortoiseDetailsForm.newStatus;
        var currentUser = MyApp.app.currentUser;

        var userid = MyApp.app.currentUser.get('userid'); 
        var utility = MyApp.app.getController('UtilityController');
        var caller = MyApp.app.getController('DreamsTabController');
        var tempDreamId = MyApp.app.tempId;

        var newOrOldTortoise = tortoiseDetailsForm.getRecord();
        tortoiseDetailsForm.updateRecord(newOrOldTortoise);

        var errorMessage = this.validateTortoise(newOrOldTortoise);
        if(errorMessage !== ''){
            Ext.Msg.alert(errorMessage, '', Ext.emptyFn);
            newOrOldTortoise.reject();
            return;
        }

        var operation = {};
        operation.success = this.tortoiseSave;
        operation.failure = function() {Ext.Msg.alert('Server error, try later','',Ext.emptyFn);return;};


        if(newStatus === 'true'){    
            newOrOldTortoise.set('userid', userid);
            newOrOldTortoise.setDream(newOrOldTortoise.getDream().getData());
            newOrOldTortoise.set('id',MyApp.app.tempId);
            newOrOldTortoise.save(operation);
        }else{
            tortoiseId = newOrOldTortoise.get('id');

            newOrOldTortoise.save(operation);

        }

    },

    onTortoiseDetailsBackButtonTap: function(button, e, eOpts) {
        alert('tortoseDetailsBackToDream');
        var dreamListCardPanel = this.getDreamListCardPanel();
        var tortoiseListPanel = this.getTortoiseListPanel();
        dreamListCardPanel.animateActiveItem(tortoiseListPanel, {type : 'slide', direction : 'right'});
    },

    onTortoiseDetailsTortletsButtonTap: function(button, e, eOpts) {
        this.getDreamListCardPanel().
        animateActiveItem(3, {type : 'slide'});
    },

    onTortoiseDetailsBackToListButtonTap: function(button, e, eOpts) {
        var tortoiseListPanel = this.getTortoiseListPanel();
        var slideConfig =  { type : 'slide', direction : 'up'}; 
        this.getDreamListCardPanel().animateActiveItem(tortoiseListPanel,slideConfig);
    },

    onTortoiseDetailsBackHorizontalButtonTap: function(button, e, eOpts) {
        var tortoiseListPanel = this.getTortoiseListPanel();
        var slideConfig =  { type : 'slide', direction : 'right'}; 
        this.getDreamListCardPanel().animateActiveItem(tortoiseListPanel,slideConfig);
    },

    onTortoiseDeleteButtonTap: function(button, e, eOpts) {
        var tortoiseListPanel = this.getTortoiseListPanel();
        var dreamListCardPanel = this.getDreamListCardPanel();
        var tortoiseDetails = this.getTortoiseDetails();
        //var dreamList = this.getDreamList();
        var tortoise = tortoiseDetails.getRecord();
        tortoiseDetails.updateRecord(tortoise);


        Ext.Msg.confirm('', "Tortoise will be deleted !", function(buttonId,value,opt) {

            if(buttonId === 'yes') { 
                tortoise.getProxy().setAppendId(true);
                tortoise.erase({ 
                    scope : this,
                    success : function(record, operation) { 
                        tortoise.getProxy().setAppendId(false);
                        var tortoisesStore = Ext.getStore('tortoisesStore');
                        var proxy = tortoisesStore.getProxy();
                        var orgUrl = proxy.getUrl();
                        var urlWithDream = orgUrl + '&dream=' + dreamId;
                        proxy.setUrl(urlWithDream);
                        tortoisesStore.load();// Have to load again otherwise
                        // store list does not get refreshed. 

                        dreamListCardPanel.animateActiveItem(tortoiseListPanel, { type : 'slide', direction : 'right'});
                    },
                    failure : function(record, operation) { alert('delete failed');}

                });

            }

        });
    },

    onTortoiseListStartDreamingButtonTap: function(button, e, eOpts) {
        //var dreamDetails = this.getDreamDetails();
        var dreamListPanel = this.getDreamListPanel();
        this.getDreamListCardPanel().setActiveItem(dreamListPanel);
    },

    dreamSave: function(savedModel) {
        var dreamsTabController = MyApp.app.getController('DreamsTabController');
        var dreamDetails = dreamsTabController.getDreamDetails();
        var tortoiseListPanel = dreamsTabController.getTortoiseListPanel();
        var dreamsStore = Ext.getStore('dreamsStore');
        var tortoisesStore = Ext.getStore('tortoisesStore');
        var proxy = tortoisesStore.getProxy();
        var orgUrl = proxy.getUrl();


        dreamDetails.setRecord(savedModel); // So that if anybody clicks back,
        // form is updated with entity from server.

        var dreamId = savedModel.get('id');

        dreamsStore.load();// Looks like this call can be async, so no
        // no callback function is passed.

        var urlWithDream = orgUrl + '&dream=' + dreamId;
        proxy.setUrl(urlWithDream);
        tortoisesStore.load(function(records, operation, success) {

            dreamsTabController.getDreamListCardPanel().animateActiveItem(tortoiseListPanel, {type : 'slide'});  
            proxy.setUrl(orgUrl);
        },this);



    },

    tortoiseSave: function(savedModel) {
        var dreamsTabController = MyApp.app.getController('DreamsTabController');
        var tortoiseListPanel = dreamsTabController.getTortoiseListPanel();
        var tortoisesStore = Ext.getStore('tortoisesStore');
        var proxy = tortoisesStore.getProxy();
        var orgUrl = proxy.getUrl();


        var dream = savedModel.get('dream');
        var dreamId = dream.id;

        var urlWithDream = orgUrl + '&dream=' + dreamId;
        proxy.setUrl(urlWithDream);
        tortoisesStore.load(function(records, operation, success) {
            dreamsTabController.getDreamListCardPanel().animateActiveItem(tortoiseListPanel, {type : 'slide', direction : 'up'});

            proxy.setUrl(orgUrl);
        },this);
    },

    validateTortoise: function(tortoise) {
        var errorMessage = '';
        var errors = tortoise.validate();
        if (!errors.isValid()) {
            errorMessage = 'Enter all mandatory fields'  ;

        }

        if(tortoise.get('monday') === false &&
        tortoise.get('tuesday') === false && 
        tortoise.get('wednesday') === false && 
        tortoise.get('thursday') === false &&
        tortoise.get('friday') === false &&
        tortoise.get('saturday') === false &&
        tortoise.get('sunday') === false
        ){

            errorMessage = 'Select at least one day';   
        }

        return errorMessage;
    }

});