/*
 * File: app/controller/UserCredentialsController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.UserCredentialsController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            homeTabCardPanel: 'homeTabCardPanel',
            landingCardPanel: 'landingCardPanel',
            genericLoginForm: 'genericLoginForm',
            registrationCardPanel: 'registrationCardPanel'
        },

        control: {
            "panel": {
                signUpSuccess: 'onRegistrationCardPanelItemIdSignUpSuccess'
            },
            "formpanel": {
                signUpRequested: 'onLoginFormItemIdSignUpRequested',
                signInSuccess: 'onLoginFormItemIdSignInSuccess'
            }
        }
    },

    onRegistrationCardPanelItemIdSignUpSuccess: function(panel) {
        var landingCardPanel = this.getLandingCardPanel();
        var genericLoginForm = this.getGenericLoginForm();

        landingCardPanel.animateActiveItem(genericLoginForm, { type: 'slide'});
    },

    onLoginFormItemIdSignUpRequested: function(formpanel) {
        var landingCardPanel = this.getLandingCardPanel();
        var registrationCardPanel = this.getRegistrationCardPanel();
        registrationCardPanel.setActiveItem(0);
        landingCardPanel.animateActiveItem(registrationCardPanel, { type: 'slide'});
    },

    onLoginFormItemIdSignInSuccess: function(userObject) {

        var currentUser = Ext.create('MyApp.model.Tuser');
        currentUser.set('id',userObject.id);
        currentUser.set('firstName',userObject.firstName);
        currentUser.set('lastName',userObject.lastName);
        currentUser.set('userid',userObject.userid);
        currentUser.set('version',userObject.version);
        var userid = userObject.userid;
        //currentUser.set('userid',userid);
        var password = userObject.plainPassword;

        var tok = userid + ':' + password;
        var hash = Base64.encode(tok);
        var authHeaderValue = "Basic " + hash;

        MyApp.app.currentUser = currentUser; // Here currentUser becomes global variable to be accessed using MyApp.app.currentUser
        MyApp.app.currentUser.tempId = 0;
        var host;

        if(window.location.host === '' || window.location.host === 'localhost'){  
            host = 'localhost:8080';    
        }else{
            host = window.location.host;
        }

        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1; //Months are zero based
        var curr_year = d.getFullYear();
        var today = (curr_month  + "/" + curr_date + "/" + curr_year);

        //todaysTortletsStore
        var todaysTortletsStore = Ext.getStore('todaysTortletsStore');
        var proxy = todaysTortletsStore.getProxy();
        proxy.setUrl('http://' + host + '/tortlets?find=ByUseridEqualsAndCreatedOnEqualsAndCompleted&userid=' +userid + '&createdOn=' + today);
        var headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        todaysTortletsStore.load();

        //incompleteTortletsStore
        var incompleteTortletsStore = Ext.getStore('incompleteTortletsStore');
        proxy = incompleteTortletsStore.getProxy();
        headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        proxy.setUrl('http://' + host + '/tortlets?find=ByUseridEqualsAndCompleted&userid=' +userid);

        //dreamsStore
        var dreamsStore = Ext.getStore('dreamsStore');
        proxy = dreamsStore.getProxy();
        headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        proxy.setUrl('http://' + host + '/dreams?find=ByUseridEquals&userid=' +userid);

        dreamsStore.load();

        //tortoisesStore
        var tortoisesStore = Ext.getStore('tortoisesStore');
        proxy = tortoisesStore.getProxy();
        headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        proxy.setUrl('http://' + host + '/tortoises?find=ByDreamAndUseridEquals&userid=' +userid);

        ////////////////////////////////////////////////////

        var Dream = Ext.ModelMgr.getModel('MyApp.model.Dream');
        proxy = Dream.getProxy();
        headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        proxy.setUrl('http://' + host + '/dreams');

        var Tortoise = Ext.ModelMgr.getModel('MyApp.model.Tortoise');
        proxy = Tortoise.getProxy();
        headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        proxy.setUrl('http://' + host + '/tortoises');

        var Tortlet = Ext.ModelMgr.getModel('MyApp.model.Tortlet');
        proxy = Tortlet.getProxy();
        headers = proxy.getHeaders();
        headers.Authorization = authHeaderValue;
        proxy.setUrl('http://' + host + '/tortlets');

        var homeTabCardPanel = this.getHomeTabCardPanel();

        var landingCardPanel = this.getLandingCardPanel();
        landingCardPanel.animateActiveItem(2, { type: 'slide'});
    }

});