/*
 * File: app/controller/HomeTabController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.HomeTabController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            tortletDetails: 'tortletDetails',
            todayTortletsList: 'todayTortletsList',
            tortletsList: 'tortletsList',
            todaysTortletListPanel: 'todaysTortletListPanel',
            tortletListPanel: 'tortletListPanel',
            tortletsListsContainerPanel: 'tortletsListsContainerPanel',
            homePageHelpModal: 'homePageHelpModal'
        },

        control: {
            "todayTortletsList": {
                itemtap: 'onTodaysTortletsListItemTap'
            },
            "tortletsList": {
                itemtap: 'onTortletsListItemTap'
            },
            "button[name='showTodayListButton']": {
                tap: 'onShowTodayListButtonTap'
            },
            "button[name='showPendingListButton']": {
                tap: 'onShowPendingListButtonTap'
            },
            "button[name='homePageHelpButton']": {
                tap: 'onHomePageHelpButtonTap'
            }
        }
    },

    onTodaysTortletsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var homeTabController = this;
        Ext.Msg.confirm('', 'Done with Tortlet ?', function(buttonId,value,opt) { 

            if(buttonId === 'yes') {

                record.sourceStoreId = 'todaysTortletsStore';
                homeTabController.saveTortlet(homeTabController, record);        
            }

        });


        //var tortletDetails = this.getTortletDetails();


        //alert(record.sourceStoreId);
        //tortletDetails.setRecord(record);

        //this.getHomeTabCardPanel().animateActiveItem(tortletDetails, { type: 'slide'});

        /// Populate record from form. populateTortletRecordFromForm()



        //this.getHomeTabCardPanel().
        //animateActiveItem(0,{type : 'slide', direction : 'right'});
    },

    onTortletsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var homeTabController = this;
        Ext.Msg.confirm('', 'Done with Tortlet ?', function(buttonId,value,opt) { 

            if(buttonId === 'yes') {

                record.sourceStoreId = 'incompleteTortletsStore';
                homeTabController.saveTortlet(homeTabController, record) ;       
            }

        });


        //var tortletDetails = this.getTortletDetails();

        //var sourceStoreId = 'incompleteTortletsStore';

        //record.sourceStoreId=sourceStoreId;
        //tortletDetails.setRecord(record);

        //this.getHomeTabCardPanel().animateActiveItem(tortletDetails, {type : 'slide'});
    },

    onShowTodayListButtonTap: function(button, e, eOpts) {
        console.log('showTodayListButton');
        var store = Ext.getStore('todaysTortletsStore');
        var tortletsListsContainerPanel = this.getTortletsListsContainerPanel();
        var todaysTortletListPanel = this.getTodaysTortletListPanel();
        var utility = MyApp.app.getController('UtilityController');
        var storeLoadCallback = utility.storeLoadCallback;

        var url = store.getProxy().getUrl();
        var today = MyApp.app.getToday();

        var todayUrl = url + '&createdOn=' + today;
        store.getProxy().setUrl(todayUrl);
        store.load(storeLoadCallback);
        store.getProxy().setUrl(url);

        tortletsListsContainerPanel.setActiveItem(todaysTortletListPanel);


    },

    onShowPendingListButtonTap: function(button, e, eOpts) {
        console.log('showPendingListButton');

        var incompleteTortletsStore = Ext.getStore('incompleteTortletsStore');
        var tortletsListsContainerPanel = this.getTortletsListsContainerPanel();
        var tortletListPanel = this.getTortletListPanel();
        var utility = MyApp.app.getController('UtilityController');
        var storeLoadCallback = utility.storeLoadCallback;

        incompleteTortletsStore.load(storeLoadCallback);
        tortletsListsContainerPanel.setActiveItem(tortletListPanel);

    },

    onHomePageHelpButtonTap: function(button, e, eOpts) {


        /*
        This is how I wanted to implement. But for this I need to move
        the panel inside landingCardPanel and complications start.

        var homePageHelpModal = this.getHomePageHelpModal();
        homePageHelpModal.show();

        */

        var homePageHelpModal = this.getHomePageHelpModal();

        var myMsgObj = Ext.create('Ext.MessageBox');
        /*
        var myMsgObj = Ext.create('Ext.MessageBox', {
        layout: {
        type: 'hbox',
        align: 'middle'
        },
        items: [
        {
        xtype: 'panel',
        flex: 1,
        style: 'background-color: red;'
        },
        {
        xtype: 'panel',
        flex: 2,
        style: 'background-color: green'
        }
        ]
        });


        */

        //var layout = { align : 'start'};
        //myMsgObj.setLayout(layout);

        //myMsgObj.show();
        myMsgObj.setCls('smallFont');
        myMsgObj.alert('','Pending tortlets older than 7 days get permanently deleted. <br/> You have to complete it before that to keep your score as high as possible', Ext.emptyFn);

        //myMsgObj.destroy ??

    },

    oldTortletSaveSuccess: function(savedEntity, operation) {

        var store = Ext.getStore(savedEntity.sourceStoreId);
        store.removedIndexRecord='';

        console.log('oldTortletSaveSuccesful');


    },

    oldTortletSaveFailure: function(entityTried, operation) {

        var store = Ext.getStore(entityTried.sourceStoreId);
        if(store.removedRecordIndex !== ''){

            store.insert(store.removedRecordIndex, entityTried);
            store.removedRecordIndex='';
        }

        Ext.Msg.alert('Server error,try again later','',Ext.emptyFn);

    },

    saveTortlet: function(homeTabController, record) {
        operation = {};
        operation.success = homeTabController.oldTortletSaveSuccess;
        operation.failure = homeTabController.oldTortletSaveFailure;

        eitherOneStore = Ext.getStore(record.sourceStoreId);
        eitherOneStore.removedRecordIndex = eitherOneStore.indexOf(record);
        eitherOneStore.remove(record); 
        record.set('completed', true);
        record.save(operation);
    }

});